generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model StudySetCard {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    term       String
    definition String
    createdAt  DateTime @default(now())
    order      Int      @default(0)

    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId
}

model StudySet {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    createdAt   DateTime @default(now())

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String @db.ObjectId

    subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId String  @db.ObjectId

    area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)
    areaId String @db.ObjectId

    viewsCount    Int   @default(0)
    commentsCount Int   @default(0)
    ratingsCount  Int   @default(0)
    rating        Float @default(0)

    cards    StudySetCard[]
    views    View[]
    ratings  Rating[]
    comments Comment[]

    @@index([name])
}

model View {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    @@unique([userId, studySetId])
}

model Rating {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    rating Int

    @@unique([userId, studySetId])
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    content String
}

model Area {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    subjects Subject[]
    StudySet StudySet[]
}

model Subject {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)
    areaId String @db.ObjectId

    studySets StudySet[]
}

model StudyStreak {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
}

enum Role {
    TEACHER
    STUDENT
    ADMIN
}

enum Achievement {
    THREE_DAY_STREAK
    SEVEN_DAY_STREAK
    FOURTEEN_DAY_STREAK
    THIRTY_DAY_STREAK
    FIVE_STUDY_SETS
    TWENTY_FIVE_STUDY_SETS
    FIFTY_STUDY_SETS
    HUNDRED_STUDY_SETS
}

model UserAchievement {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    achievement Achievement

    @@unique([userId, achievement])
}

model User {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    username String  @unique
    email    String  @unique
    password String
    image    String?
    role     Role    @default(STUDENT)

    studySets    StudySet[]
    studyStreaks StudyStreak[]
    views        View[]
    ratings      Rating[]
    comments     Comment[]
    achievements UserAchievement[]
}
