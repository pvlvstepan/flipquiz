// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model StudySetCard {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    term       String
    definition String
    createdAt  DateTime @default(now())
    order      Int      @default(0)
    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId
}

model StudySet {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    createdAt   DateTime @default(now())
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String   @db.ObjectId

    subject   Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
    subjectId String?  @db.ObjectId

    area   Area?   @relation(fields: [areaId], references: [id], onDelete: SetNull)
    areaId String? @db.ObjectId

    deleted   Boolean   @default(false)
    deletedAt DateTime?

    cards    StudySetCard[]
    views    View[]
    ratings  Rating[]
    comments Comment[]

    @@index([name])
}

model View {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime @default(now())
    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @db.ObjectId

    @@unique([userId, studySetId])
}

model Rating {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime @default(now())
    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @db.ObjectId

    rating Int

    @@unique([userId, studySetId])
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())

    studySet   StudySet @relation(fields: [studySetId], references: [id], onDelete: Cascade)
    studySetId String   @db.ObjectId

    user   User   @relation(fields: [userId], references: [id])
    userId String @db.ObjectId

    content   String
    deleted   Boolean   @default(false)
    deletedAt DateTime?
}

model Area {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    subjects Subject[]
    StudySet StudySet[]
}

model Subject {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String

    area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)
    areaId String @db.ObjectId

    studySets StudySet[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    studySets StudySet[]
    views     View[]
    ratings   Rating[]
    comments  Comment[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
